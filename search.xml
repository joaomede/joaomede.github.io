<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Api Doc - SDK - Tests - 04</title>
      <link href="/2020/04/28/apidoc-sdk-tests-04/"/>
      <url>/2020/04/28/apidoc-sdk-tests-04/</url>
      
        <content type="html"><![CDATA[<h3 id="The-Tests"><a href="#The-Tests" class="headerlink" title="The Tests"></a>The Tests</h3><p>A “Api Doc - SDK” tem como objetivo principal, abstrair as regras do API Rest do projeto principal e encapsulá-las, como os métodos de chamadas de banco de dados, usando a tecnologia “Knex”, sendo assim, a menor unidade da SDK pode ser testada, nesse sentido, fez muito sentido utilizar os tests unitários no projeto, o “Knex” permite mudança de banco de dados, então decidi usar o SQLite nas rotinas de tests.<br>Dito isso, utilizei a estrategia, de durante os “push” para o repositório “Git”, utilizar integração continua “CI” para executar os tests.</p><h3 id="Running-Tests-And-Continuous-Integration"><a href="#Running-Tests-And-Continuous-Integration" class="headerlink" title="Running Tests And Continuous Integration"></a>Running Tests And Continuous Integration</h3><p>Após o push para o respitório Git, a integração continua entra em ação, realizando o script de tests já pré-definido para o projetos, seguindo a seguinte ordem:</p><ol><li>Instalação</li><li>Build</li><li>Tests</li></ol><p><img src="/assets/data/apidoc-sdk-tests-04/logTest.png" alt="All tests"></p><p><img src="/assets/data/apidoc-sdk-tests-04/finish-test-log.png" alt="Result"></p><h3 id="The-Coverage"><a href="#The-Coverage" class="headerlink" title="The Coverage"></a>The Coverage</h3><p>Após finalizado o test, é gerado um relátorio que informa qual é a cobertura do código, a “coverage”.<br>Basicamente, esse relatório explica quais regiões do código os tests estão “fracos” ou “fortes”, permitindo assim, que o “Tester” saiba exatamente quais funções estão sendo negligênciadas, permitindo a criação de tests para aquela determinada região/função.<br>Um outro ponto importante dos testes unitários, é o fato de que para se obter uma boa covertura, se faz necessidade não somente testar os resultados das funções, mas também de provacar exceções, ou seja, uma boa taxa de covertura não consiste somente em testar o resultado de uma função, mas também testar o erro, dessa forma, se faz necessário provacar exceções, portanto, um test baseado somente em resultados nunca atingirá 100% de cobertura.</p><p><img src="/assets/data/apidoc-sdk-tests-04/sdk-coverage.png" alt="Coverage"></p><h3 id="The-Badge"><a href="#The-Badge" class="headerlink" title="The Badge"></a>The Badge</h3><p>Eu deixei ess parte para o final, pois é a minha favorita, os “CI” oferecem relatórios, e-mail, e se brincar dá para pra integrar API de robôs para nos ligar ou mandarem SMS, porém, as Badges ficam na cara do repositório, dessa forma, se você visitar o respoitório e uma integração quebrar, logo de cara você ficará sabendo da mal notícia.</p><p><img src="/assets/data/apidoc-sdk-tests-04/codecov-badge.png" alt="CI and Codecov Badges"></p><h3 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h3><p>Alguns dos desafios que encontrei no desenvolvimento dos tests para projeto foi a mudança do banco de dados “postgres” para “SQLite” durante a integração continua, alguns métodos “Knex” fazem “returning”, que é um método nativo da library Knex, que faz o retorno durante a inserção ou atualização de dados, nesse caso, o returning ainda não está disponível para o banco de dados SQLite, isso me forçou a remover parte dos tests impactando no resultado final da cobertura.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
            <tag> Tests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK - Semantics and Standardization - 03</title>
      <link href="/2020/04/27/apidoc-sdk-semantics-and-standardization-03/"/>
      <url>/2020/04/27/apidoc-sdk-semantics-and-standardization-03/</url>
      
        <content type="html"><![CDATA[<h2 id="Semantics"><a href="#Semantics" class="headerlink" title="Semantics"></a>Semantics</h2><p>Desde já deixo claro que não sou nenhum especialista no assunto, como informado no “about”, sou apenas um estudante de Análise e Desenvolvimento de Sistemas, buscando sempre se aperfeiçoar. Esta SDK é um laborário, mas para além disso, também é uma ferramenta que levo a sério, dito isso, falarei um pouco sobre a padronização e samântica que apliquei em todas as funções da aplicação.</p><h2 id="Create-Delete-Update-And-More"><a href="#Create-Delete-Update-And-More" class="headerlink" title="Create, Delete, Update And More"></a>Create, Delete, Update And More</h2><p>Observem no <strong>IntelliSense</strong> que quando digitado “cre”, automaticamente surge todos os métodos “create” disponível na sdk.</p><p><img src="/assets/data/apidoc-sdk-semantics-and-standardization-03/semantics-create.png" alt="Create"></p><p>O mesmo acontece com todos os outros métodos, segue abaixo exemplos.</p><p><img src="/assets/data/apidoc-sdk-semantics-and-standardization-03/semantics-del.png" alt="Delete"><br><img src="/assets/data/apidoc-sdk-semantics-and-standardization-03/semantics-get.png" alt="Get"><br><img src="/assets/data/apidoc-sdk-semantics-and-standardization-03/semantics-update.png" alt="Update"></p><h2 id="IntelliSense-Highlights-and-Standardization"><a href="#IntelliSense-Highlights-and-Standardization" class="headerlink" title="IntelliSense, Highlights and Standardization"></a>IntelliSense, Highlights and Standardization</h2><p>Caso o programador digite “ById”, o <strong>IntelliSense</strong> vai exibir todos os métodos que contenham “ID”, ou seja, “get by id”, “update by id”, além disso, me preocupei também com os sentidos quantitativos,<br>Por exemplo: “get one” para listar um ou “get all” para listar todos, outra questão que também me preocupei foi o retorno dos métodos, caso você chame “get one”, receberá sempre um objeto, caso chame “get all” receberá sempre um array, independentemente da quantidade desse array, é claro que boa parte dessa padronização ainda precisam de revisões, mas acredito que consegui impor uma boa padronização e semântica no projeto.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK - Create a Doc - 02</title>
      <link href="/2020/04/26/apidoc-sdk-create-a-doc-02/"/>
      <url>/2020/04/26/apidoc-sdk-create-a-doc-02/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-documentation"><a href="#Create-documentation" class="headerlink" title="Create documentation"></a>Create documentation</h3><p>Para criar uma nova documentação, basta chamar o método “createNewApiDoc”, onde será necessário passar o “ID” do usuário e um payload, contendo o objeto a ser criado,<br>abaixo segue um exemplo de como criar o objeto e a estrutura do payload.</p><h3 id="The-Payload"><a href="#The-Payload" class="headerlink" title="The Payload"></a>The Payload</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"apiName"</span><span class="token operator">:</span> <span class="token string">"Api Test"</span><span class="token punctuation">,</span>  <span class="token property">"descriptionApi"</span><span class="token operator">:</span> <span class="token string">"This Api is an Test"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"v1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"isPublic"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"baseURL"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">}</span></code></pre><h3 id="The-Method"><a href="#The-Method" class="headerlink" title="The Method"></a>The Method</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">createNewApiDoc</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sucess'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Then/Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">createNewApiDoc</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">thec</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Abount-Security"><a href="#Abount-Security" class="headerlink" title="Abount Security"></a>Abount Security</h3><p>Observem que a SDK não se preocupa com autenticação, as regras de autenticação devem ficar na camada da API da sua aplicação e podem ser modificadas de acordo com seu modelo de aplicação, isso foi feito propositalmente para que a SDK pudesse ser utilizada de forma mais ampla.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK - Introduction - 01</title>
      <link href="/2020/04/26/apidoc-sdk-introduction-01/"/>
      <url>/2020/04/26/apidoc-sdk-introduction-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Api-Doc-The-SDK"><a href="#Api-Doc-The-SDK" class="headerlink" title="Api Doc - The SDK"></a>Api Doc - The SDK</h2><p>Esta é a uma série de postagens que serão numeradas para facilitar o entendimento.</p><p>O projeto api doc - sdk js, é atualmente um submodulo do projeto principal, “Api Doc”, trata-se de uma abstração das regras crud do sistema principal, contendo o ORM “knex” como pacote principal, onde todos os métodos encapsulam as regras do sistema “Api Doc”</p><h2 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h2><p>Caso um desenvolvor queira iniciar um gerencidor de Documentação de API, ele pode usar essa SDK para começar um novo sistema, inclusive, uma nova API,<br>basicamente, é necessário instalar o pacote SDK e começar a diversão.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Importando o pacote e configurando o “Knex”, muito parecido com a forma original de configuração “Knex”.</p><p>Além de configurar o “Knex”, para acesso ao banco de dados, é necessário também definir uma chave de API, todos os tokens serão gerados com base nesta chave.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> ApiDoc <span class="token keyword">from</span> <span class="token string">"api-doc-js-doc"</span><span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    client<span class="token punctuation">:</span> <span class="token string">"pg"</span><span class="token punctuation">,</span>    connection<span class="token punctuation">:</span> <span class="token punctuation">{</span>      port<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORTDB<span class="token punctuation">,</span>      host<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>HOSTDB<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_USER<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_PASSWORD<span class="token punctuation">,</span>      database<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_DB<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    pool<span class="token punctuation">:</span> <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> idleTimeoutMillis<span class="token punctuation">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">ApiDoc</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">,</span> <span class="token string">"TheApiSecretKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Importing-the-Instance"><a href="#Importing-the-Instance" class="headerlink" title="Importing the Instance"></a>Importing the Instance</h2><p>Após definir a configuração básica do pacote, é necessário importar a instancia e chamar os métodos</p><h4 id="Register-New-User"><a href="#Register-New-User" class="headerlink" title="Register New User"></a>Register New User</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> apiDoc <span class="token keyword">from</span> <span class="token string">"../config/api"</span><span class="token punctuation">;</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">"passwordTest"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Async Await / Try Catch</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">newUserAsyncAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return new user</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or</span><span class="token comment" spellcheck="true">// Then Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return new user</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Get-a-JWT-Login-Authentication"><a href="#Get-a-JWT-Login-Authentication" class="headerlink" title="Get a JWT (Login/Authentication)"></a>Get a JWT (Login/Authentication)</h4><p>Para realizar uma autenticação, basta usar o método “userAuth”, passando email e senha como parâmetros, que a sdk vai retornar o objeto “usuário” e um token de JWT para válido.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> apiDoc <span class="token keyword">from</span> <span class="token string">"../config/api"</span><span class="token punctuation">;</span><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">"passwordTest"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Async Await / Try Catch</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">userAuth</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or</span><span class="token comment" spellcheck="true">// Then Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">userAuth</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userAndToken<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userAndToken<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return user/token jwt</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc</title>
      <link href="/2020/04/10/apidoc/"/>
      <url>/2020/04/10/apidoc/</url>
      
        <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Há algum tempo pensei em desenvolver uma ferramenta similar ao postman e outros, que fosse Open Source e tivesse uma boa interface mobile além de armazenar tudo em banco de dados.<br>Comecei então a desenvolver o “Api Doc”, inicialmente, ele foi pensado em NoQSL, mais especificamente em “MongoDB”, porém, com o tempo decidi mudar para bancos relacionais, e encontrei no “Knex” uma ótima solução rápida, inicialmente o objeto principal foi modelado com a seguinte estrutura:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  "api<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> reponses<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="The-Projects"><a href="#The-Projects" class="headerlink" title="The Projects"></a>The Projects</h2><p>Na versão relacional, as entidades foram separadas e passaram a serem aninhadas no frontend, com a reactividade Vuejs.<br>Devido ao aumento do projeto, decidi migrar algumas regras para uma SDK, que permitiria qualquer desenvolvedor começar um novo frontend e até mesmo uma nova Api com novas regras ou um outro sistema de permissões de usuário, abaixo a estrutura dos projetos:</p><p><strong>Api Doc</strong></p><ul><li>Frontend (vuejs/quasar) “javascript”</li><li>Api Rest (express.js) “typescript</li></ul><p><strong>SDK</strong></p><ul><li>Knex (settings)</li><li>Crud Functions (Methods)</li><li>Auth</li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Atualmente, o projeto conta com suporte para os métodos básicos: GET, POST, PUT e DELETE, suporta Headers, Querys e Params, o sistema também conta com autenticação e registro de emails, sistema de documentação privada, pública e compartilhada, onde também é possível embutir a documentação em outros sites</p><h2 id="Builds"><a href="#Builds" class="headerlink" title="Builds"></a>Builds</h2><p>O Api Doc, com ajuda do framework Vuejs e a Lib Quasar, é possível gerar builds SPA, SPA PWA, SPA PWA SSR, além de Electron para Windows e Linux, também é possível gerar cordova e outros híbridros, porém, não tenho testado estas versões.</p><h2 id="Want-to-help-the-project"><a href="#Want-to-help-the-project" class="headerlink" title="Want to help the project?"></a>Want to help the project?</h2><p>O projeto Api Doc nasceu da minha vontade de melhorar enquanto programador, portanto, ele está aberto a todos, faça um fork e vamos lá!</p><h2 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h2><table><thead><tr><th align="center">Mobile</th><th align="center">Mobile</th><th align="center">Mobile</th></tr></thead><tbody><tr><td align="center"><img src="/assets/data/apidoc/mobile1.png" alt=""></td><td align="center"><img src="/assets/data/apidoc/mobile2.png" alt=""></td><td align="center"><img src="/assets/data/apidoc/mobile2.png" alt=""></td></tr></tbody></table><p><img src="/assets/data/apidoc/electronDesktop.png" alt="Api Doc - Cliente linux ou windows"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> vuejs </tag>
            
            <tag> quasar.dev </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
