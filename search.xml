<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Api Doc</title>
      <link href="/2020/04/10/apidoc/"/>
      <url>/2020/04/10/apidoc/</url>
      
        <content type="html"><![CDATA[<h2 id="Sobre"><a href="#Sobre" class="headerlink" title="Sobre"></a>Sobre</h2><p>Há algum tempo pensei em desenvolver uma ferramenta similar ao postman e outros, que fosse Open Source e tivesse uma boa interface mobile além de armazenar tudo em banco de dados.<br>Comecei então a desenvolver o “Api Doc”, inicialmente, ele foi pensado em NoQSL, mais especificamente em “MongoDB”, porém, com o tempo decidi mudar para bancos relacionais, e encontrei no “Knex” uma ótima solução rápida, inicialmente o objeto principal foi modelado com a seguinte estrutura:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  "api<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> reponses<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="Os-Projetos"><a href="#Os-Projetos" class="headerlink" title="Os Projetos"></a>Os Projetos</h2><p>Na versão relacional, as entidades foram separadas e passaram a serem aninhadas no frontend, com a reactividade Vuejs.<br>Devido ao aumento do projeto, decidi migrar algumas regras para uma SDK, que permitiria qualquer desenvolvedor começar um novo frontend e até mesmo uma nova Api com novas regras ou um outro sistema de permissões de usuário, abaixo a estrutura dos projetos:</p><p><strong>Api Doc</strong></p><ul><li>Frontend (vuejs/quasar) “javascript”</li><li>Api Rest (express.js) “typescript</li></ul><p><strong>SDK</strong></p><ul><li>Knex (settings)</li><li>Crud Functions (Methods)</li><li>Auth</li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Atualmente, o projeto conta com suporte para os métodos básicos: GET, POST, PUT e DELETE, suporta Headers, Querys e Params, o sistema também conta com autenticação e registro de emails, sistema de documentação privada, pública e compartilhada, onde também é possível embutir a documentação em outros sites</p><h2 id="Builds"><a href="#Builds" class="headerlink" title="Builds"></a>Builds</h2><p>O Api Doc, com ajuda do framework Vuejs e a Lib Quasar, é possível gerar builds SPA, SPA PWA, SPA PWA SSR, além de Electron para Windows e Linux, também é possível gerar cordova e outros híbridros, porém, não tenho testado estas versões.</p><h2 id="Want-to-help-the-project"><a href="#Want-to-help-the-project" class="headerlink" title="Want to help the project?"></a>Want to help the project?</h2><p>O projeto Api Doc nasceu da minha vontade de melhorar enquanto programador, portanto, ele está aberto a todos, faça um fork e vamos lá!</p><h2 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h2><table><thead><tr><th align="center">Mobile</th><th align="center">Mobile</th><th align="center">Mobile</th></tr></thead><tbody><tr><td align="center"><img src="/medias/data/apidoc/mobile1.png" alt=""></td><td align="center"><img src="/medias/data/apidoc/mobile2.png" alt=""></td><td align="center"><img src="/medias/data/apidoc/mobile2.png" alt=""></td></tr></tbody></table><p><img src="/medias/data/apidoc/electronDesktop.png" alt="Api Doc - Cliente linux ou windows"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> vuejs </tag>
            
            <tag> quasar.dev </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
