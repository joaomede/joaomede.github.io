<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Auto Deploy Docker - 01 - Introduction</title>
      <link href="/2020/06/12/auto-deploy-docker-01-introduction/"/>
      <url>/2020/06/12/auto-deploy-docker-01-introduction/</url>
      
        <content type="html"><![CDATA[<h3 id="The-App"><a href="#The-App" class="headerlink" title="The App"></a>The App</h3><p>Esta é uma aplicação experimental na qual faz parte do meu portfólio, trata-se de um Open Source e está disponível no GitHub. <a href="https://github.com/joaomede/Auto-Deploy-Docker" target="_blank" rel="noopener">Auto Deploy Docker</a>.</p><h3 id="The-Solution-and-Problem"><a href="#The-Solution-and-Problem" class="headerlink" title="The Solution and Problem"></a>The Solution and Problem</h3><p>Ao lançar uma nova release no DockerHub, caso tenha alguma versão em produção, pode ser necessário fazer alguma ação manual para atualizar a implantação. A partir dessa necessidade, para evitar ação manual <strong>(stop container, update docker-compose.yml and run)</strong>, decidi construir esta aplicação. Ela tem como objeto central realizar uma rotina de backend para implantar um novo container (dispensando docker-compose) ou reeimplantar/atualizar, caso você lance alguma release no DockerHUB, para tal é necessário fazer uso dos WebHooks oficiais que a plataforma disponibiliza. </p><h3 id="The-API"><a href="#The-API" class="headerlink" title="The API"></a>The API</h3><p>A API Rest dessa aplicação tem como objeto central gerenciar a autentição do frontend, tal como registrar usuário e realizar login, para isso, utilizei Typescript com Express.js e depedências jwt para gerir a questão do token, na API também há uma rota para receber a notificação do webhook DockerHUB na qual inicializa uma rotina de implantação atráves desse gatilho.</p><h3 id="The-Frontend"><a href="#The-Frontend" class="headerlink" title="The Frontend"></a>The Frontend</h3><p>O Frontend do projeto foi construído com Vuejs (javascript). atualmente ele consiste em telas de autenticação (login / register), uma tela para listagem de quais projetos estão cadastrados (conjunto de containers inteligados), e dentro do projeto selecionado há uma listagem containers relacionados, permitindo editar variáveis de ambientes dos containers, configuração network e demais parametros permitidos, assim como criar novas implantações automaticas ou removê-las.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>Atualmente o projeto dispõe das seguintes configurações Docker</p><ul><li>Image Name</li><li>Container Name</li><li>Commands</li><li>Volume Bindings</li><li>Networks (for now only bridge)</li><li>Work Dir.</li><li>Environments variables</li><li>Tty</li><li>Exposed Ports</li><li>Port Bindings<br>and more settings…</li></ul><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>Esta aplição não tem como função ou objetivo solucionar problemas de grandes sistemas, se você possui uma VPS com containers e precisa de algo para fazer implantações automáticas,essa aplicação se propõe a resolver o problema, porém, numa pespectiva escalável os grandes servidores como Google, AWS, Azure, etc já oferecem soluções para tal.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Essa é a tela de autenticação.<br><img src="/assets/data/auto-deploy-docker-01-introduction/auth.png" alt="Authentication"></p><p>Os projetos são listados da seguinte maneira, é aprensetado o titulo do projeto e a Chave (usado para o webhook)<br><img src="/assets/data/auto-deploy-docker-01-introduction/projects_list.png" alt="Create List"></p><p>No ato de criar um novo projeto, será necessário definir o nome, a chave (necessário criar), além da informação se o acesso ao servidor docker será local ou via API (docker api), caso queria poderá adicionar um email para receber noficações das implatanções.<br><img src="/assets/data/auto-deploy-docker-01-introduction/newproject.png" alt="Create Project"></p><p>Caso clique no projeto, abrirá uma tela com detalhes contendo as configurações do projeto, assim como haverá um botão para ir adiante, para a tela dos containers (Container List), também há opções de implantar manualmente “no caso da primeira implantação”<br><img src="/assets/data/auto-deploy-docker-01-introduction/project_datail.png" alt="Create Detail"></p><p>Na tela Container List é possível ver todos os containers pertencentes aquele projeto, assim como a ordem de implantação (qual container vai inciar primeiro)<br><img src="/assets/data/auto-deploy-docker-01-introduction/container_list.png" alt="Container List"></p><p>Ao clicar no botão de criar container, aparecerá o modal contendo todas as opções de criações, atualmente, o projeto não oferece todas as opções da tecnologia, então eu me limitei a oferecer as principais configurações que são listados no tópico Feature<br><img src="/assets/data/auto-deploy-docker-01-introduction/newcontainer_0.png" alt="Create Container - 01"><br><img src="/assets/data/auto-deploy-docker-01-introduction/newcontainer_1.png" alt="Create Container - 01"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> NPM </tag>
            
            <tag> Docker </tag>
            
            <tag> Deploy </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resp Express</title>
      <link href="/2020/05/02/resp-express/"/>
      <url>/2020/05/02/resp-express/</url>
      
        <content type="html"><![CDATA[<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p><a href="https://github.com/joaomede/resp-express" target="_blank" rel="noopener">Resp Express</a> foi a minha primeira Library publicada no <a href="https://www.npmjs.com/package/resp-express" target="_blank" rel="noopener">npmjs</a>, eu já vinha utilizando-a há algum tempo nos projetos privados e decidi que publicá-la para facilitação.<br>Trata-se de um simples encapsulamento do método de resposta da library “ExpressJS”, vamos lá!</p><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>A principal motivação para publicação dessa library foi o “Laboratório”, como pesquisador e desenvolvedor eu estou sempre construindo laboratórios para compreender determinados conceitos, nesse sentido, criei essa library para aprender como publicar uma library, com atender determinados requisitos para que a mesma pudesse funcionar em diferentes padrões JS e Typescript.</p><h3 id="The-Library"><a href="#The-Library" class="headerlink" title="The Library"></a>The Library</h3><p>A library, hoje, encapsula 7 variações de respostas, sendo elas;</p><ul><li>returnSucessMessage</li><li>returnSucessObject</li><li>returnErrorMessage</li><li>returnErrorObject</li><li>returnObjectWithCode</li><li>returnErrorCode</li><li>returnSucessCode</li></ul><p>Segue abaixo alguns exemplos de uso.</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> resp-express<span class="token comment" spellcheck="true"># or</span>yarn add resp-express</code></pre><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> resp <span class="token keyword">from</span> <span class="token string">"resp-express"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span><span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"resp-express"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span></code></pre><h3 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h3><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  resp<span class="token punctuation">.</span><span class="token function">returnSucessMessage</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">"Sucess !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Ao digitar “resp.”, aparecerá todos os métodos, semanticamente, iniciando com a palavra “return”, por exemplo; “returnSucessMessage”.<br>No exemplo, “returnSucessMessage”, ele aceita 2 parâmetros, sendo eles;</p><ul><li>res; o Object “Response” do express.</li><li>message; uma String que será enviada como resultado da Request.</li></ul><p>Um exemplo do objeto que será retornado;</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ok"</span><span class="token operator">:</span> <span class="token string">"Sucess !!"</span><span class="token punctuation">}</span></code></pre><p>Seguindo essa lógica, alguns métodos vão ter a key <strong>“ok”</strong> ou <strong>“error”</strong> implicíto, fazendo necessário passar apenas o conteúdo, outros métodos como <strong>“returnSucessObject”</strong>, necessitará do <strong>object</strong> que será retornado, não possuirá a key <strong>“ok”</strong> implícita, outros método como <strong>“returnErrorMessage”</strong>, retornará sempre um objeto e conterá sempre o <strong>status 400</strong>.</p><p>Para fazer retornos fora desses padrões, eu escrevi os métodos <strong>“returnObjectWithCode”</strong>, que aceita <strong>Status Code</strong> e <strong>Object</strong> como parâmetros, podendo ser usado para retornar <strong>Sucess</strong> ou <strong>Error</strong> Response.<br>Os métodos <strong>“returnSucessCode”</strong> e <strong>“returnErrorCode”</strong> tem funcionalidade parecida, eles também aceitam <strong>Status</strong> e <strong>Object</strong> como parâmetros, devendo ser usado respectivamente para retornar <strong>“Sucess”</strong> ou <strong>“Error”</strong>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK - 04 - Tests</title>
      <link href="/2020/04/28/apidoc-sdk-04-tests/"/>
      <url>/2020/04/28/apidoc-sdk-04-tests/</url>
      
        <content type="html"><![CDATA[<h3 id="The-Tests"><a href="#The-Tests" class="headerlink" title="The Tests"></a>The Tests</h3><p>E chegamos na minha parte favorita, os tests!<br>A “Api Doc - SDK” tem como objetivo principal abstrair as regras do API Rest do projeto principal e encapsulá-las.<br>Os métodos realizam, em sua maioria, chamadas de banco de dados, usando a tecnologia “Knex” e todos são exportados individualmente, sendo assim, a menor unidade da SDK pode ser testada, permitindo a implementação dos tests unitários.<br>Pensando em “CI”, passei a executar os tests após os push no projeto “Git”.</p><h3 id="Running-Tests-And-Continuous-Integration"><a href="#Running-Tests-And-Continuous-Integration" class="headerlink" title="Running Tests And Continuous Integration"></a>Running Tests And Continuous Integration</h3><p>Após o push para o respitório Git, a integração continua entra em ação, realizando o script de tests já pré-definido para o projetos, seguindo a seguinte ordem:</p><ol><li>Instalação</li><li>Build</li><li>Tests</li></ol><p><img src="/assets/data/apidoc-sdk-04-tests/logTest.png" alt="All tests"></p><p><img src="/assets/data/apidoc-sdk-04-tests/finish-test-log.png" alt="Result"></p><h3 id="The-Coverage"><a href="#The-Coverage" class="headerlink" title="The Coverage"></a>The Coverage</h3><p>Após finalizado o test, é gerado um relátorio que informa qual é a cobertura do código, a “coverage”.<br>Basicamente, esse relatório explica quais regiões do código os tests estão “fracos” ou “fortes”, permitindo assim, que o “Tester” saiba exatamente quais métodos estão sendo negligênciadas, permitindo a criação de tests para aquela determinada região.<br>Um outro ponto importante dos testes unitários, é o fato de que para se obter uma boa cobertura, se faz necssário não somente testar os resultados das métodos, mas também provacar exceções.<br>Ou seja, uma boa taxa de cobertura não consiste somente em testar o resultado de uma função, mas também testar o erro, dessa forma, um test baseado somente em resultados nunca atingirá 100% de cobertura.</p><p><img src="/assets/data/apidoc-sdk-04-tests/sdk-coverage.png" alt="Coverage"></p><h3 id="The-Badge"><a href="#The-Badge" class="headerlink" title="The Badge"></a>The Badge</h3><p>É comum entrar em repositórios e ver vários badges, basicamente eles podem estar conectados a relatórios, como o “action github” ou outros tipos de serviços.<br>No caso do repositório “Api Doc - JS SDK”, eu estou utilizando o badge do <strong>Travis</strong>, que permite uma visualização rápida da última integração realizada e também a do Codecov, que a visualização prévia do resultado do <strong>Coverage</strong></p><p><img src="/assets/data/apidoc-sdk-04-tests/codecov-badge.png" alt="CI and Codecov Badges"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
            <tag> Tests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK - 03 - Semantics</title>
      <link href="/2020/04/27/apidoc-sdk-03-semantics/"/>
      <url>/2020/04/27/apidoc-sdk-03-semantics/</url>
      
        <content type="html"><![CDATA[<h2 id="Semantics"><a href="#Semantics" class="headerlink" title="Semantics"></a>Semantics</h2><p>Desde já deixo claro que não sou nenhum especialista no assunto, como informado no “about”, sou apenas um estudante de Análise e Desenvolvimento de Sistemas buscando sempre se aperfeiçoar.<br>Esta SDK é um laborário, mas para além disso, também é uma ferramenta que levo a sério, dito isso, falarei um pouco sobre a padronização e samântica que apliquei em todas as funções da aplicação.</p><h2 id="Create-Delete-Update-And-More"><a href="#Create-Delete-Update-And-More" class="headerlink" title="Create, Delete, Update And More"></a>Create, Delete, Update And More</h2><p>Observem no <strong>IntelliSense</strong> que quando digitado “cre”, automaticamente surgem todos os métodos “create…” disponível na sdk.</p><p><img src="/assets/data/apidoc-sdk-03-semantics/semantics-create.png" alt="Create"></p><p>O mesmo acontece com todos os outros métodos, segue abaixo exemplos.</p><p><img src="/assets/data/apidoc-sdk-03-semantics/semantics-del.png" alt="Delete"><br><img src="/assets/data/apidoc-sdk-03-semantics/semantics-get.png" alt="Get"><br><img src="/assets/data/apidoc-sdk-03-semantics/semantics-update.png" alt="Update"></p><h2 id="IntelliSense-and-Highlights"><a href="#IntelliSense-and-Highlights" class="headerlink" title="IntelliSense and Highlights"></a>IntelliSense and Highlights</h2><p>Caso digite “ById”, o <strong>IntelliSense</strong> vai exibir todos os métodos que contenham “ID”, ou seja, “get by id”, “update by id”, além disso, me preocupei também com os sentidos quantitativos.<br>Por exemplo: <strong>“get one”</strong> para listar um ou <strong>“get all”</strong> para listar todos.<br>Pensando nos retornos dos métodos, caso você chame <strong>“get one”</strong>, receberá sempre um <strong>objeto</strong>, caso chame <strong>“get all”</strong> receberá sempre um <strong>array</strong>, independentemente da quantidade desse array.</p><p>Ainda falta alguns ajustes relacionado a essa padronização e o projeto está aberto a <strong>pull requests</strong>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK - 02 - Create a Doc</title>
      <link href="/2020/04/26/apidoc-sdk-02-create-a-doc/"/>
      <url>/2020/04/26/apidoc-sdk-02-create-a-doc/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-documentation"><a href="#Create-documentation" class="headerlink" title="Create documentation"></a>Create documentation</h3><p>Para criar uma nova documentação, basta chamar o método “createNewApiDoc”, onde será necessário passar o “ID” do usuário e um payload, contendo o objeto a ser criado,<br>abaixo segue um exemplo de como criar o objeto e a estrutura do payload.</p><h3 id="The-Payload"><a href="#The-Payload" class="headerlink" title="The Payload"></a>The Payload</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"apiName"</span><span class="token operator">:</span> <span class="token string">"Api Test"</span><span class="token punctuation">,</span>  <span class="token property">"descriptionApi"</span><span class="token operator">:</span> <span class="token string">"This Api is an Test"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"v1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"isPublic"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"baseURL"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">}</span></code></pre><h3 id="The-Method"><a href="#The-Method" class="headerlink" title="The Method"></a>The Method</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">createNewApiDoc</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sucess'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Then/Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">createNewApiDoc</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">thec</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="About-Security"><a href="#About-Security" class="headerlink" title="About Security"></a>About Security</h3><p>Observem que a SDK não se preocupa com autenticação, as regras de autenticação devem ficar na camada da API da sua aplicação e podem ser modificadas de acordo com seu modelo de aplicação, isso foi feito propositalmente para que a SDK pudesse ser utilizada de forma mais ampla.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK - 01 - Introduction</title>
      <link href="/2020/04/26/apidoc-sdk-01-introduction/"/>
      <url>/2020/04/26/apidoc-sdk-01-introduction/</url>
      
        <content type="html"><![CDATA[<h3 id="Api-Doc-The-SDK"><a href="#Api-Doc-The-SDK" class="headerlink" title="Api Doc - The SDK"></a>Api Doc - The SDK</h3><p>Esta é a uma série de postagens que sequencial sobre a <a href="https://github.com/joaomede/api-doc-js-sdk" target="_blank" rel="noopener">Api Doc - JS SDK</a>.<br>O projeto “<a href="https://github.com/joaomede/api-doc-js-sdk" target="_blank" rel="noopener">Api Doc - JS SDK</a>“, é atualmente um submódulo do projeto principal, O <a href="https://github.com/joaomede/Api-Doc" target="_blank" rel="noopener">Api Doc</a>, trata-se de uma abstração das regras crud do sistema principal, contendo o ORM “knex” como pacote principal, onde todos os métodos encapsulam as regras do sistema “<a href="https://github.com/joaomede/Api-Doc" target="_blank" rel="noopener">Api Doc</a>“</p><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>A documentação de API’s é parte fundamental do processo de construção e utilização de API’s, tornando não só a utilização da mesma menos “doloroza” mas também facilitando a sua manutenção, e essa foi a motivação central da construção desse projeto, construir uma tecnologia que facilita-se a documentação e ao mesmo tempo atendende-se os pontos básicos, como testes, etc.</p><h3 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h3><p>Quando comecei o projeto, pensei em não me limitar ao Framework usado no frontend, o “Vuejs” e muito menos na API Rest, o “ExpressJS”, nesse sentido, decidi abstrair as regras numa SDK, que não só eu como qualquer interessado pudesse recriar o sistema em outras plataformas com um certo grau de flexibilidade</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Importando o pacote e configurando o “Knex”, muito parecido com a forma original de configuração “Knex”.</p><p>Além de configurar o “Knex”, para acesso ao banco de dados, é necessário também definir uma chave de API, todos os tokens serão gerados com base nesta chave.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> ApiDoc <span class="token keyword">from</span> <span class="token string">"api-doc-js-doc"</span><span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    client<span class="token punctuation">:</span> <span class="token string">"pg"</span><span class="token punctuation">,</span>    connection<span class="token punctuation">:</span> <span class="token punctuation">{</span>      port<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORTDB<span class="token punctuation">,</span>      host<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>HOSTDB<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_USER<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_PASSWORD<span class="token punctuation">,</span>      database<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_DB<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    pool<span class="token punctuation">:</span> <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> idleTimeoutMillis<span class="token punctuation">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">ApiDoc</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">,</span> <span class="token string">"TheApiSecretKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Importing-the-Instance"><a href="#Importing-the-Instance" class="headerlink" title="Importing the Instance"></a>Importing the Instance</h3><p>Após definir a configuração básica do pacote, é necessário importar a instancia e chamar os métodos</p><h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> apiDoc <span class="token keyword">from</span> <span class="token string">"../config/api"</span><span class="token punctuation">;</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">"passwordTest"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Async Await / Try Catch</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">newUserAsyncAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return new user</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or</span><span class="token comment" spellcheck="true">// Then Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return new user</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p>Para realizar uma autenticação, basta usar o método “userAuth”, passando email e senha como parâmetros, que a sdk vai retornar o objeto “usuário” e um token de JWT para válido.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> apiDoc <span class="token keyword">from</span> <span class="token string">"../config/api"</span><span class="token punctuation">;</span><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">"passwordTest"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Async Await / Try Catch</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">userAuth</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or</span><span class="token comment" spellcheck="true">// Then Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">userAuth</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userAndToken<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userAndToken<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return user/token jwt</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc</title>
      <link href="/2020/04/10/apidoc/"/>
      <url>/2020/04/10/apidoc/</url>
      
        <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Há algum tempo pensei em desenvolver uma ferramenta similar ao postman e outros, que fosse Open Source e tivesse uma boa interface mobile além de armazenar tudo em banco de dados.<br>Comecei então a desenvolver o “Api Doc”, inicialmente, ele foi pensado em NoQSL, mais especificamente em “MongoDB”, porém, com o tempo decidi mudar para bancos relacionais, e encontrei no “Knex” uma ótima solução rápida, inicialmente o objeto principal foi modelado com a seguinte estrutura:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  "api<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> reponses<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="The-Projects"><a href="#The-Projects" class="headerlink" title="The Projects"></a>The Projects</h2><p>Na versão relacional, as entidades foram separadas e passaram a serem aninhadas no frontend, com a reactividade Vuejs.<br>Devido ao aumento do projeto, decidi migrar algumas regras para uma SDK, que permitiria qualquer desenvolvedor começar um novo frontend e até mesmo uma nova Api com novas regras ou um outro sistema de permissões de usuário, abaixo a estrutura dos projetos:</p><p><strong>Api Doc</strong></p><ul><li>Frontend (vuejs/quasar) “javascript”</li><li>Api Rest (express.js) “typescript</li></ul><p><strong>SDK</strong></p><ul><li>Knex (settings)</li><li>Crud Functions (Methods)</li><li>Auth</li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Atualmente, o projeto conta com suporte para os métodos básicos: GET, POST, PUT e DELETE, suporta Headers, Querys e Params, o sistema também conta com autenticação e registro de emails, sistema de documentação privada, pública e compartilhada, onde também é possível embutir a documentação em outros sites</p><h2 id="Builds"><a href="#Builds" class="headerlink" title="Builds"></a>Builds</h2><p>O Api Doc, com ajuda do framework Vuejs e a Lib Quasar, é possível gerar builds SPA, SPA PWA, SPA PWA SSR, além de Electron para Windows e Linux, também é possível gerar cordova e outros híbridros, porém, não tenho testado estas versões.</p><h2 id="Want-to-help-the-project"><a href="#Want-to-help-the-project" class="headerlink" title="Want to help the project?"></a>Want to help the project?</h2><p>O projeto Api Doc nasceu da minha vontade de melhorar enquanto programador, portanto, ele está aberto a todos, faça um fork e vamos lá!</p><h2 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h2><table><thead><tr><th align="center">Mobile</th><th align="center">Mobile</th><th align="center">Mobile</th></tr></thead><tbody><tr><td align="center"><img src="/assets/data/apidoc/mobile1.png" alt=""></td><td align="center"><img src="/assets/data/apidoc/mobile2.png" alt=""></td><td align="center"><img src="/assets/data/apidoc/mobile2.png" alt=""></td></tr></tbody></table><p><img src="/assets/data/apidoc/electronDesktop.png" alt="Api Doc - Cliente linux ou windows"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> vuejs </tag>
            
            <tag> quasar.dev </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
