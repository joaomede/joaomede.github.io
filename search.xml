<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Api Doc - SDK - Create a Doc - 02</title>
      <link href="/2020/04/26/apidoc-sdk-create-a-doc-02/"/>
      <url>/2020/04/26/apidoc-sdk-create-a-doc-02/</url>
      
        <content type="html"><![CDATA[<h2 id="Create-documentation"><a href="#Create-documentation" class="headerlink" title="Create documentation"></a>Create documentation</h2><p>Para criar uma nova documentação, basta chamar o método “createNewApiDoc”, onde será necessário passar o “ID” do usuário e um payload, contendo o objeto a ser criado,<br>abaixo segue um exemplo de como criar o objeto e a estrutura do payload.</p><h3 id="The-Payload"><a href="#The-Payload" class="headerlink" title="The Payload"></a>The Payload</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"apiName"</span><span class="token operator">:</span> <span class="token string">"teste"</span><span class="token punctuation">,</span>  <span class="token property">"descriptionApi"</span><span class="token operator">:</span> <span class="token string">"teste"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"teste"</span><span class="token punctuation">,</span>  <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"teste"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"teste"</span><span class="token punctuation">,</span>  <span class="token property">"isPublic"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"baseURL"</span><span class="token operator">:</span> <span class="token string">"teste"</span><span class="token punctuation">}</span></code></pre><h3 id="The-Method"><a href="#The-Method" class="headerlink" title="The Method"></a>The Method</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">createNewApiDoc</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">returnSucessMessage</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">"Api adicionada com sucesso"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    resp<span class="token punctuation">.</span><span class="token function">returnErrorMessage</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Then/Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">createNewApiDoc</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">thec</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Abount-Security"><a href="#Abount-Security" class="headerlink" title="Abount Security"></a>Abount Security</h3><p>Observem que a SDK não se preocupa com autenticação, as regras de autenticação devem ficar na camada da API da sua aplicação e podem ser modificadas de acordo com seu modelo de aplicação, isso foi feito propositalmente para que a SDK pudesse ser utilizada de forma mais ampla.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc - SDK JS - Introduction - 01</title>
      <link href="/2020/04/26/apidoc-sdk-introduction-01/"/>
      <url>/2020/04/26/apidoc-sdk-introduction-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Api-Doc-The-SDK"><a href="#Api-Doc-The-SDK" class="headerlink" title="Api Doc - The SDK"></a>Api Doc - The SDK</h2><p>Esta é a uma série de postagens que serão numeradas para facilitar o entendimento.</p><p>O projeto api doc - sdk js, é atualmente um submodulo do projeto principal, “Api Doc”, trata-se de uma abstração das regras crud do sistema principal, contendo o ORM “knex” como pacote principal, onde todos os métodos encapsulam as regras do sistema “Api Doc”</p><h2 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h2><p>Caso um desenvolvor queira iniciar um gerencidor de Documentação de API, ele pode usar essa SDK para começar um novo sistema, inclusive, uma nova API,<br>basicamente, é necessário instalar o pacote SDK e começar a diversão.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Importando o pacote e configurando o “Knex”, muito parecido com a forma original de configuração “Knex”.</p><p>Além de configurar o “Knex”, para acesso ao banco de dados, é necessário também definir uma chave de API, todos os tokens serão gerados com base nesta chave.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> ApiDoc <span class="token keyword">from</span> <span class="token string">"api-doc-js-doc"</span><span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    client<span class="token punctuation">:</span> <span class="token string">"pg"</span><span class="token punctuation">,</span>    connection<span class="token punctuation">:</span> <span class="token punctuation">{</span>      port<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORTDB<span class="token punctuation">,</span>      host<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>HOSTDB<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_USER<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_PASSWORD<span class="token punctuation">,</span>      database<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>POSTGRES_DB<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    pool<span class="token punctuation">:</span> <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> idleTimeoutMillis<span class="token punctuation">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">ApiDoc</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">,</span> <span class="token string">"TheApiSecretKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Importing-the-Instance"><a href="#Importing-the-Instance" class="headerlink" title="Importing the Instance"></a>Importing the Instance</h2><p>Após definir a configuração básica do pacote, é necessário importar a instancia e chamar os métodos</p><h4 id="Register-New-User"><a href="#Register-New-User" class="headerlink" title="Register New User"></a>Register New User</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> apiDoc <span class="token keyword">from</span> <span class="token string">"../config/api"</span><span class="token punctuation">;</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">"passwordTest"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Async Await / Try Catch</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">newUserAsyncAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return new user</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or</span><span class="token comment" spellcheck="true">// Then Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return new user</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Get-a-JWT-Login-Authentication"><a href="#Get-a-JWT-Login-Authentication" class="headerlink" title="Get a JWT (Login/Authentication)"></a>Get a JWT (Login/Authentication)</h4><p>Para realizar uma autenticação, basta usar o método “userAuth”, passando email e senha como parâmetros, que a sdk vai retornar o objeto “usuário” e um token de JWT para válido.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> apiDoc <span class="token keyword">from</span> <span class="token string">"../config/api"</span><span class="token punctuation">;</span><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"email@teste.com"</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">"passwordTest"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Async Await / Try Catch</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> apiDoc<span class="token punctuation">.</span><span class="token function">userAuth</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or</span><span class="token comment" spellcheck="true">// Then Catch</span>apiDoc  <span class="token punctuation">.</span><span class="token function">userAuth</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userAndToken<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userAndToken<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return user/token jwt</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// return an eventual error</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api Doc</title>
      <link href="/2020/04/10/apidoc/"/>
      <url>/2020/04/10/apidoc/</url>
      
        <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Há algum tempo pensei em desenvolver uma ferramenta similar ao postman e outros, que fosse Open Source e tivesse uma boa interface mobile além de armazenar tudo em banco de dados.<br>Comecei então a desenvolver o “Api Doc”, inicialmente, ele foi pensado em NoQSL, mais especificamente em “MongoDB”, porém, com o tempo decidi mudar para bancos relacionais, e encontrei no “Knex” uma ótima solução rápida, inicialmente o objeto principal foi modelado com a seguinte estrutura:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  "api<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> tag<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> reponses<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="The-Projects"><a href="#The-Projects" class="headerlink" title="The Projects"></a>The Projects</h2><p>Na versão relacional, as entidades foram separadas e passaram a serem aninhadas no frontend, com a reactividade Vuejs.<br>Devido ao aumento do projeto, decidi migrar algumas regras para uma SDK, que permitiria qualquer desenvolvedor começar um novo frontend e até mesmo uma nova Api com novas regras ou um outro sistema de permissões de usuário, abaixo a estrutura dos projetos:</p><p><strong>Api Doc</strong></p><ul><li>Frontend (vuejs/quasar) “javascript”</li><li>Api Rest (express.js) “typescript</li></ul><p><strong>SDK</strong></p><ul><li>Knex (settings)</li><li>Crud Functions (Methods)</li><li>Auth</li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Atualmente, o projeto conta com suporte para os métodos básicos: GET, POST, PUT e DELETE, suporta Headers, Querys e Params, o sistema também conta com autenticação e registro de emails, sistema de documentação privada, pública e compartilhada, onde também é possível embutir a documentação em outros sites</p><h2 id="Builds"><a href="#Builds" class="headerlink" title="Builds"></a>Builds</h2><p>O Api Doc, com ajuda do framework Vuejs e a Lib Quasar, é possível gerar builds SPA, SPA PWA, SPA PWA SSR, além de Electron para Windows e Linux, também é possível gerar cordova e outros híbridros, porém, não tenho testado estas versões.</p><h2 id="Want-to-help-the-project"><a href="#Want-to-help-the-project" class="headerlink" title="Want to help the project?"></a>Want to help the project?</h2><p>O projeto Api Doc nasceu da minha vontade de melhorar enquanto programador, portanto, ele está aberto a todos, faça um fork e vamos lá!</p><h2 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h2><table><thead><tr><th align="center">Mobile</th><th align="center">Mobile</th><th align="center">Mobile</th></tr></thead><tbody><tr><td align="center"><img src="/assets/data/apidoc/mobile1.png" alt=""></td><td align="center"><img src="/assets/data/apidoc/mobile2.png" alt=""></td><td align="center"><img src="/assets/data/apidoc/mobile2.png" alt=""></td></tr></tbody></table><p><img src="/assets/data/apidoc/electronDesktop.png" alt="Api Doc - Cliente linux ou windows"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> javascript </tag>
            
            <tag> SDK </tag>
            
            <tag> Library </tag>
            
            <tag> vuejs </tag>
            
            <tag> quasar.dev </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
